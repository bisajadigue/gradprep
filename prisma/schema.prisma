// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String      @id @default(cuid())
    name          String?
    email         String?     @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    bio           String?
    role          UserRole?
    education     Education[]
    mentor        Mentor?
    student       Student?
    isOnboarded   Boolean?    @default(false)
}

model Education {
    id     String @id @default(cuid())
    userId String
    school String
    degree String
    field  String
    user   User   @relation(fields: [userId], references: [id])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum UserRole {
    MENTOR
    USER
}

model Mentor {
    userId      String       @id @unique
    experiences Experience[]
    expertise   String?
    cvUrl       String?
    calendlyUrl String?
    user        User         @relation(fields: [userId], references: [id])
    bookings    Booking[]
}

model Student {
    userId       String        @id @unique
    testAttempts TestAttempt[]
    user         User          @relation(fields: [userId], references: [id])
    bookings     Booking[]
}

model Experience {
    id           String  @id @default(cuid())
    mentorId     String
    organization String
    title        String
    startPeriod  String
    endPeriod    String?
    mentor       Mentor  @relation(fields: [mentorId], references: [userId])
}

model TestCategory {
    slug        String @id
    title       String
    description String
    resources   String
    tests       Test[]
}

model Test {
    id             String       @id @default(uuid())
    name           String
    description    String
    instructions   String
    timer          Int
    testCategoryId String
    testCategory   TestCategory @relation(fields: [testCategoryId], references: [slug])
    questions      Question[]
}

model Question {
    id          String            @id @default(cuid())
    title       String
    embed       String?
    optionA     String
    optionB     String
    optionC     String
    optionD     String
    answer      Choice
    dateCreated DateTime          @default(now())
    test        Test              @relation(fields: [testId], references: [id])
    testId      String
    attempts    QuestionAttempt[]
}

model TestAttempt {
    id               String            @id @default(cuid())
    testld           String
    score            Int
    startTime        DateTime
    student          Student           @relation(fields: [studentId], references: [userId])
    studentId        String
    questionAttempts QuestionAttempt[]
}

model QuestionAttempt {
    id            String      @id @default(cuid())
    choiced       Choice
    question      Question    @relation(fields: [questionId], references: [id])
    questionId    String
    testAttempt   TestAttempt @relation(fields: [testAttemptId], references: [id])
    testAttemptId String
}

enum Choice {
    a
    b
    c
    d
}

model Booking {
    id         String   @id @default(uuid())
    mentorId   String
    menteeId   String
    startTime  DateTime
    link       String?
    isApproved Boolean? @default(false)
    mentor     Mentor   @relation(fields: [mentorId], references: [userId])
    mentee     Student  @relation(fields: [menteeId], references: [userId])
}

model Event {
    id           String   @id @default(cuid())
    title        String
    type         String
    funding      String
    providerName String
    description  String
    startTime    DateTime
    endTime      DateTime
}
