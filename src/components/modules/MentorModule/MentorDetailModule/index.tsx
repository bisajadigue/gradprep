import { type User } from "@prisma/client";
import Head from "next/head";
import { useEffect, useState } from "react";
import { api } from "@/utils/api";
import { useRouter } from "next/router";
import Lottie from "lottie-react";
import Help from "public/assets/lottie/help.json";
import { Button, SearchInput } from "@/components/elements";
import { RiFile2Fill, RiFile2Line, RiFileImageLine } from "react-icons/ri";
import Image from "next/image";
import { type IMentorNew } from "@/components/elements/Cards/MentorCard/interface";
import { useSession } from "next-auth/react";
import toast, { Toaster } from "react-hot-toast";
import { dummy } from "..";

export default function MentorDetailPage() {
  const router = useRouter();
  const id = router.query.id as string;

  const fetchMentor = api.userData.getUserInformationById.useQuery({ id: id });
  const requestBooking = api.booking.booking.useMutation();
  const [data, setData] = useState<IMentorNew | undefined>(dummy);
  const { data: sessionData } = useSession();

  useEffect(() => {
    // void setData(fetchMentor.data as IMentorNew);
    // console.log(fetchMentor.data)
  }, [fetchMentor.data]);

  function request() {
    const body = {
      studentId: sessionData!.user.id,
      mentorId: id,
    };
    console.log(`requesting:` + JSON.stringify(body));
    requestBooking.mutate(body);

    if (requestBooking.data || requestBooking.isSuccess) {
      toast.success("Booking made! Redirecting to Calendly...");
      window.open(data?.mentor.calendlyUrl)
    }
    if (requestBooking.isError) {
      toast.error("Booking failed");
    }
  }

  return (
    <>
      <Head>
        <title>Mentor {data?.name}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {/* Hero */}
      <main className="relative flex min-h-screen flex-col items-center justify-start">
        <div className="relative h-[40vh] w-full bg-primary text-white">
          <Toaster />
          <div className="absolute bottom-0 right-[5vw] w-[20vw]">
            <Lottie animationData={Help} loop={false} />
          </div>
          <div className="container mx-auto flex h-[12vh] w-full flex-row items-start justify-start gap-x-3 pt-[27vh]">
            <div>
              {data?.image && (
                <Image
                  src={data.image}
                  width={140}
                  height={140}
                  alt="mentor profile picture"
                  className="rounded-full"
                />
              )}
            </div>
            <div>
              <h2 className="">{data?.name}</h2>
              <p>{data?.mentor.experiences[0]?.title}</p>
            </div>
          </div>
        </div>
        <div className="container mt-[10vh] flex w-full flex-col gap-8 md:flex-row">
          <div className="rounded-[15px] border border-gray-400 bg-gray-50 p-10 md:w-[70%]">
            <p className="font-bold">Bio</p>
            <p>{data?.bio}</p>
            {/* <hr className="my-3" /> */}
            {/* <p className="font-bold">Experiences</p>
            {data?.mentor.experiences.map((exp, i) => (
              <div key={i} className="ml-6 flex">
                <p className="font-medium">{exp.organization}</p>
                <p>{" – "}</p>
                <p>{exp.title}</p>
                <p>({exp.startPeriod} - {exp.endPeriod})</p>
              </div>
            ))} */}
            <hr className="my-3" />
            <p className="font-bold">Education History</p>
            {data?.education.map((edu, i) => (
              <div key={i} className="ml-6 flex">
                <p className="font-medium">{edu.school}</p>
                <p>{" – "}</p>
                <p>{edu.degree}</p>
              </div>
            ))}
          </div>
          <div className="flex flex-col items-center gap-1 rounded-[15px] border border-gray-400 bg-gray-50 p-10 text-center md:w-[30%]">
            <p className="font-bold">Mentoring Topics</p>
            {/* <p>{data?.expertise}</p> */}
            <p>Technology, Data Science, Sustainable Computing, Scholarships</p>
            <hr className="mt-8" />
            <Button
              variant={"primary"}
              size={"md"}
              onClick={() => {
                // request();
                window.open(data?.mentor.calendlyUrl);
              }}
            >
              Request Session
            </Button>
            <p>
              Mentor ini sudah menyelesaikan <b>2</b> session sebelumnya!
            </p>
          </div>
        </div>
      </main>
    </>
  );
}
